
from youtube_transcript_api import YouTubeTranscriptApi


videos = [
# livestreams'fFeylyGGPNs',
'Rr7BG6tP97k',
'3YdOUNe40no',
'JZkPp3FOFa4',
'e4GMWArHBB8',
'_StzUtUWT_c',
'u4xVF5ChGhw',
'kI5bYkcsHHE',
's4F72D9TDLU',
'Q7k5pxKgsjU',
'QJ_sEiQFCVc',
'kGOOVHjyOI0',
'g17Q_edH94Q',
'gR_cujuAuIY',
'-TfJSI1Hny0',
'MKGUgZGh81E',
'zdAu2ELMcRM',
'E56vLiu8Nh8',
'wKALC7npBqQ',
'TMphThY1sNY',
't_opp3Veg5Q',
'WUKohLLGVzs',
'PwYKBqvFzjw',
'zf5M-t4QlPg',
'W5Co5LVDS2I',
'AXQBoaQojGQ',
'2Bqcki_lqII',
'NYoZtHEN9kg',
'zC3uEIotIko',
'YZ-cwNB9p20',
'gyLXido2Lp8',
'5YuQ8CA0Y5w',
'VrQUtD7yB_g',
'i-0PUlIJjAI',
'CCZrDDCoyJs',
'jG6iGbjk9yA',
'FHUnSTt3wCM',
'cPP6hrlaBnA',
'CMVxSCwhRgY',
'97ZcN8KUWoA',
'cUqy0Usgdr0',
'JxpszfaNzuw',
'aYgfQoZxrY8',
'ayJwcoR1Zhs',
'Yq2Q8CBq3LM',
'L2ksl66Xc_8',
'bC3JAWCZ_kc',
'pNzl5oz1Luw',
'sxwFk4Zgoi8',
'7IXlvDsJ6nY',
'w4HG2dybdiI',
'3OZKLoxiETg',
'KbJE2fzUdf4',
'1MXR4acwBCM',
'szk12apPuDo',
'xqlDfHXbBTE',
'evGMF2fMP4I',
'O-9C_Q6r8p0',
'KgxWLILFc9E',
'cT_kMFZQogE',
'aWdjQMDsPR4',
'7UqRFTGsAmk',
'KkgRdeY2T4o',
'l-r9wITZkG8',
'j5KYWmNbfac',
'Dzh6NFc988o',
'GCt3mOn78-M',
'e-guloGXxAA',
'16fb1mXO7Nw',
'BhSv51Y05No',
'hV3ygTY0SD4',
'6cwJHzvHvNI',
'Q3tveEOwFJ8',
'QkCmB-Von_A',
'kD5Bw_A-hEg',
'J5Tk5b2eWqg',
'_MzB23Q3zYE',
'o8Dn577gi-0',
's40xyjy7y5E',
'xGwUrUnJEpY',
'GwGqvzCoO7M',
'ALgKaHhEUBE',
'sYQuGLmWAU4',
'EGoIrqrpfog',
'fMdTcI0ByV4',
'b-QOeZLcdxQ',
'3jTlhklOjHs',
'PjCoCWdyFVQ',
'IldiVxZiiU0',
'EaxOjbrdkzY',
'77eECXzVHEI',
'_YSxMzvibyk',
'OUoeZTJzcyY',
'WW96EY-r2Ic',
'SWAaWDMBNTs',
'7Zs4XDnhXzA',
'2L46hfgLxV0',
'q0StYnl59_E',
'XI9hFYhhJPg',
'LSVeQwUhFq0',
'BGq1-P0Fy0c',
'okwkwAINMzo',
'e2KnPctVyjs',
'WSu5MUC-9AM',
'Di-PZ7e6RIY',
'jypoyS-xZ_Q',
'Dd_0siVc2e0',
'_mkI2C0gCwU',
'qapqomqpc1g',
'aaxx36Kp-T8',
'RlLa6BIz9TM',
'UMhDZmDPJMg',
'v85kk8na-dQ',
'KnYDh6ktnuc',
'TzubtOQhsQQ',
'EUGLRgONPkE',
'6xoR9LgnJHI',
'K1xSVRvx2uo',
'kY_VOYGM0ec',
'256h9Oj3n9M',
'Gl5LXOTq6fY',
'CQRksoiE8kA',
'3qlTE1VOYJI',
'cQXVnMZBqPs',
'LnJhyRdNIOs',
'TCtGJTTJj2U',
'DfhVXDZ39bk',
'svMomPN3vFU',
'5OO9GpeFzPA',
'csHnu5-583M',
'2AFBslX5flI',
'-zaj2J7A-fM',
'UjN9NL74NEU',
'bYUKWN-fZfE',
'fTXrKenWI4w',
'FVJsspS_Jy0'
]

problematic_words_and_phrases = ["arknight", "arknights", "arcanites", "arc nights"]


for videoId in videos:
  try:
    transcript = YouTubeTranscriptApi.get_transcript(videoId)
    results = list(filter(lambda x: any(word in x[videoId]['text'].lower() for word in problematic_words_and_phrases), map(lambda x: { videoId: x }, transcript)))
    if results:
      print(results)
  except:
    continue



